#!/usr/bin/env bash
# -*- bash -*-
#

set -u -e -o pipefail

ME="gemify"
DIR="$( basename "$(pwd)" )"

# === COMMAND: init
if [[ "$@" == "init" ]]; then
  __gemify_init
  exit 0
fi

function git_is_clean {
    if ! git_repo_is_clean
    then
      echo -e "\n!!! GIT repo not clean enough.\n" 1>&2
      exit 1
    fi
}

rm -f ./*.gem

case "$@" in

  "bump") # === COMMAND: bump
    git_is_clean

    bump current
    echo -e "=== Bumping...\n"
    bump $1 --no-commit --no-bundle
    VER=$(cat VERSION)

    git add    .
    git add    -u
    git commit -m   "Bump: $VER"
    git tag         "v$VER"
    ;;

  "push") # === COMMAND: push
    git_is_clean
    VER=$(cat VERSION)
    git push origin "v$VER"
    ;;

  "release") # === COMMAND: release
    git_is_clean
    $ME push
    gem build ./*.gemspec
    gem push "$(echo ./*.gem)"
    ;;

  "init") # === COMMAND: init
    echo ""
    name="$(basename $(pwd))"

    contents="
    /*.gem
    /Gemfile.lock
    "

    if [[ ! -f .gitignore ]]
    then
      echo -e "$contents" >> .gitignore
      echo -e "=== wrote: .gitignore"
    fi

    user="$(git config --global user.name)"
    gemspec="$name.gemspec"
    contents="
Gem::Specification.new do |s|
s.name        = '$name'
s.version     = %x(cat VERSION)
s.date        = '$(date +"%Y-%m-%d")'
s.summary     = \"Not ready.\"
s.description = \"Not ready.\"
s.authors     = [\"$user\"]
s.email       = '$user@$user'
#s.executables = [\"$name\"]
s.files       = %x(ls lib/).split(\"\n\").map { |f| \"lib/#{f}\" }
s.homepage    = 'http://www.github.com/$user/$name'
s.license     = 'MIT'

s.require_paths = [\"lib\"]
#s.add_runtime_dependency 'erector'
s.add_development_dependency('bacon')
s.add_development_dependency('Bacon_Colored')
end
"

    if [[ ! -f $gemspec ]]
    then
      echo -e "$contents" >> $gemspec
      echo -e "=== wrote: $gemspec"
    fi

    contents="
    source \"http://rubygems.org\"

    gemspec
    "
    if [[ ! -f Gemfile ]]
    then
      echo -e "$contents" >> Gemfile
      echo -e "=== wrote: Gemfile"
    fi

    if [[ ! -f README.md ]]
    then
      echo -e "\n\n$name\n=================" >> README.md
      echo -e "=== wrote: README.md"
    fi

    contents="
Copyright (c) $(date +"%Y") $user

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the \"Software\"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
"

    if [[ ! -f VERSION ]]
    then
      echo -e "0.0.0" >> VERSION
      echo -e "=== wrote: VERSION"
    fi

    if [[ ! -f LICENSE ]]
    then
      echo -e "$contents" >> LICENSE
      echo -e "=== wrote: LICENSE"
    fi

    if [[ ! -d .git ]]
    then
      url="git remote add origin ssh://github/$user/$name.git"
      git init
      git remote add origin $url
      echo -e "=== wrote: git init, origin $url"
    fi

    if [[ ! -d "test" ]]
    then
      mkdir -p tests
    fi

    if [[ ! -d lib ]]
    then
      mkdir -p lib
      touch lib/$name.rb
    fi

    $green "=== Done writing: $name\n"
    ;;

esac  # === $@

