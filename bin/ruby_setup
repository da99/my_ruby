#!/usr/bin/env bash
# -*- bash -*-
#
#
action="$1"
shift

set -u -e -o pipefail
DIR="$( basename "$(pwd)" )"
TEMPLATES="/apps/ruby_setup/templates/gem"

# PATH="/progs/ruby/current/bin:$PATH"

function git_is_clean {
    if ! git_repo_is_clean
    then
      echo -e "\n!!! GIT repo not clean enough.\n" 1>&2
      exit 1
    fi
}


case "$action" in

  "help")
    echo ""
    echo "  $ ruby_setup   class_name  My_Class"
    echo ""
    echo "  $ ruby_setup   list"
    echo "  $ ruby_setup   update-defs"
    echo "  $ ruby_setup   install x.x.x"
    echo "  $ ruby_setup   install"
    echo ""
    echo "  === Create a gem: ==="
    echo "  -- create repo @ github.com"
    echo "  $ mkdir  my_new_gem"
    echo "  $ cd     my_new_gem"
    echo "  ====================="
    echo ""
    echo "  $ ruby_setup   ruby_clean"
    echo ""
    echo "  $ ruby_setup   gem_init"
    echo "  $ ruby_setup   gem_init              bitbucket"
    echo "  $ ruby_setup   bump_commit_push  major|minor|patch"
    echo ""
    echo "  $ ruby_setup   release"
    echo ""
    echo "  $ ruby_setup   gem_rename            old   new"
    echo ""
    echo "  $ ruby_setup   gem_install"
    echo ""
    echo "  $ ruby_setup   gemrc_config"
    echo ""
    echo "  $ ruby_setup   bundle"
    echo ""
    exit 0
    ;;


  "update-defs")
    cd /progs
    if [[ ! -d /progs/ruby-build ]]; then
      git clone https://github.com/sstephenson/ruby-build.git
    fi
    cd ruby-build
    git pull
    ;;

  "list")
    cd /progs/ruby-build
    git pull
    ruby_setup update-defs
    /progs/ruby-build/bin/ruby-build --definitions | grep "^[2-9]"
    ;;

  "upgrade")
    gem update --user-install
    ;;

  "install")
    if [[ -z "$@" ]]; then
      my_gems=/progs/ruby/my_gems
      mkdir -p "$my_gems"
      bash_setup make_link "$my_gems" $HOME/.gem
      if ! gem list -i curses; then
        gem install --user-install curses # Needed for fzf
      fi

      exit 0
    fi

    cd /progs/ruby-build
    git pull

    # === https://github.com/wayneeseguin/rvm/blob/master/scripts/functions/requirements/ubuntu
    # === https://github.com/sstephenson/ruby-build/wiki
    # echo "=== Updating system using apt-get:"
    # sudo apt-get update
    # sudo apt-get upgrade
    # sudo apt-get install git      \
    #   curl gawk zlib1g-dev        \
    #   build-essential libssl-dev  \
    #   libreadline-dev libyaml-dev \
    #   libsqlite3-dev sqlite3      \
    #   libxml2-dev libxslt-dev     \
    #   bash curl patch bzip2 ca-certificates gawk                        \
    #   g++ gcc make libc6-dev patch openssl ca-certificates libreadline6 \
    #   libreadline6-dev curl zlib1g zlib1g-dev libssl-dev libyaml-dev    \
    #   libsqlite3-dev sqlite3 autoconf                                   \
    #   libgdbm-dev libncurses5-dev automake libtool bison pkg-config libffi-dev \
    #   make libc6-dev patch openssl ca-certificates libreadline6         \
    #   libreadline6-dev curl zlib1g zlib1g-dev libssl-dev libyaml-dev    \
    #   libsqlite3-dev sqlite3 autoconf                                   \
    #   libgdbm-dev libncurses5-dev automake libtool bison pkg-config libffi-dev \
    #   autoconf bison build-essential                                    \
    #   libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev           \
    #   libedit-dev                                                       \
    #   libcurl4-openssl-dev

    if [[ -z "$@" ]]; then
      ruby_setup list
      echo "=== Choose one from the top."
      exit 0
    fi

    if [[ -z "$@" ]]
    then
      ver="$(/progs/ruby-build/bin/ruby-build --definitions | grep '^[0-9]\+\.[0-9]\+\.[0-9]\+$' | tail -n 1)"
    else
      ver="$1"
    fi

    if [[ -d /progs/ruby/$ver ]]; then
      echo "=== Aborting: Already exists: /progs/ruby/$ver"
      exit 0
    fi

    # ================ The Main Show ======================
    echo "=== THIS IS GOING TO TAKE ABOUT 5-10 mins...."
    CONFIGURE_OPTS="--enable-shared --disable-install-doc" \
      /progs/ruby-build/bin/ruby-build $ver /progs/ruby/$ver
    # =====================================================


    echo "=== Linking $ver as current ruby:"
    rm -f /progs/ruby/current
    ln -s /progs/ruby/$ver  /progs/ruby/current

    echo "=== Updating gems:"
    gem update --system
    gem update --no-document
    gem install bundler --no-document
    gem install bump    --no-document
    gem install pry     --no-document
    ruby_setup  gemrc_config

    echo "=== Done installing."
    ruby -v

    ;;

  "class_name")
    ruby -e "puts ARGV[0].downcase.split('_').map(&:capitalize).join('_')" "$@"
    ;;

  "instance_name")
    ruby -e "puts ARGV[0].downcase" "$@"
    ;;

  "ruby_clean")
    bash_setup files_zero aputs '*.rb'
    bash_setup files_zero puts  '*.rb'
    bash_setup files_zero binding.pry  '*.rb'
    ;;


  "gem_install")
    set -x
    trash-put *.gem
    name="$(basename $(pwd))"
    name="$(basename $(pwd))"
    gem build "${name}.gemspec"
    gem install "${name}-$(cat VERSION).gem"
    ;;

  "release")
    rm -f ./*.gem
    git_is_clean
    gem build ./*.gemspec
    gem push "$(echo ./*.gem)"

    # This is done last in case the gem has errors,
    #  like "FIXME" or "TODO" in the gemspec.
    git push origin "v$(cat VERSION)"
    git push
    ;;

  "bump")
    if [[ -z "$(which bump)" ]]; then
      echo "!!! install rubygem: gem install bump"
      exit 1
    fi
    if [[ "$1" != "current" ]]; then
      git_is_clean
      echo -e "=== Bumping from: $(bump current)\n"
    fi
    bump $1 --no-commit --no-bundle
    ;;

  "bump_commit_push")
    ruby_setup ruby_clean
    git_is_clean
    bundle update
    if [[ -f "bin/test" ]]; then
      bin/test
    else
      "bin/$(basename "$(pwd)")" test
    fi

    $0 bump $@

    VER=$(cat VERSION)
    git_update
    git commit -m   "Bump: $VER"
    git tag         "v$VER"
    git push
    git push origin "v$VER"
    ;;

  "gem_init")

    echo ""
    export name="$(basename $(pwd))"
    export NAME="$(ruby_setup class_name $name)"
    export today="$(date +"%Y-%m-%d")"
    export year="$(date +"%Y")"
    export user="$(git config --global user.name)"
    export email="$(git config --global user.email)"
    gemspec="${name}.gemspec"

    if [[ -z "$@" ]]; then
      export repo="github"
      export homepage="https://github.com/${user}/${name}"
      export repo_git="git@github.com:${user}/${name}.git"
    else
      export repo="bitbucket"
      export homepage="https://bitbucket.org/da99/${name}"
      export repo_git="git@bitbucket.org:${user}/${name}.git"
    fi

    mkdir -p specs/lib
    mkdir -p lib
    mkdir -p bin

    ruby_setup template $TEMPLATES/Gemfile     Gemfile
    ruby_setup template $TEMPLATES/LICENSE     LICENSE
    ruby_setup template $TEMPLATES/README.md   README.md
    ruby_setup template $TEMPLATES/the.gemspec ${name}.gemspec
    ruby_setup template $TEMPLATES/VERSION     VERSION
    ruby_setup template $TEMPLATES/.gitignore  .gitignore
    ruby_setup template $TEMPLATES/lib.rb      lib/${name}.rb
    ruby_setup template $TEMPLATES/helpers.rb  specs/lib/helpers.rb

    ruby_setup template $TEMPLATES/name        bin/${name}
    chmod +x bin/${name}

    # === Create a default test file if no other test files exist.
    if [[ "$(echo -n specs/*.rb)" == "" ]]; then
      ruby_setup template $TEMPLATES/first_test.rb specs/${name}.rb
    fi

    if [[ ! -d .git ]]; then
      git init
    fi

    if [[ -z "$(git remote -v)" ]]; then
      git_update
      git commit -m "Init."
      git remote add origin $repo_git
    fi

    colorize green "=== Done gem init: $name"
    ;;

  "template")
    file="$1"
    output="$2"
    ruby_template='
      file  = ARGV[0]
      tmpl  = File.read(file)
      puts(tmpl.gsub(/{{([^}]+)}}/) do |match|
        raise "Var not found: #{$1}" unless ENV[$1]
        ENV[$1]
      end)
    '

    if [[ -f $output ]]; then
      colorize yellow "=== Skipping existing file: $output"
      exit 0
    fi

    # Note: eval and write the content separately.
    # If you combine those two steps, and an error
    # occurs during eval, an empty file will be created:
    #   ruby "error" >> $output
    content="$(ruby -e "$ruby_template" "$file")"
    echo "$content" >> "$output"
    colorize green "=== Wrote: $output"
    ;;

  "gemrc_config")
      if [[ ! -f /etc/gemrc ]]
      then
        echo "---" > /tmp/gemrc_temp
        echo ":verbose: true" > /tmp/gemrc_temp
        echo ":sources:" > /tmp/gemrc_temp
        echo "- https://rubygems.org" > /tmp/gemrc_temp
        echo "gem: --no-ri --no-rdoc" > /tmp/gemrc_temp
        echo ":update_sources: true"  > /tmp/gemrc_temp
        sudo mv /tmp/gemrc_temp /etc/gemrc
        echo "Wrote to /etc/gemrc:"
      else
        echo "File already exists: /etc/gemrc"
      fi

      cat /etc/gemrc
    ;;

  "gem_rename")
    old="$(ruby_setup instance_name $1)"
    new="$(ruby_setup instance_name $2)"
    old_class="$(ruby_setup class_name $1)"
    new_class="$(ruby_setup class_name $2)"

    if [[ -d "/apps/$old" ]]
    then
      cd /apps
      mv "$old" "$new"
    fi

    cd "/apps/$new"

    for i in $(find . -name "*$1*" -print)
    do
      echo "=== Moving: $old  -->  $new"
      mv -i $i ${i/$old/$new}
    done

    find ./ -type f -not -path "*/.git/*" -exec sed -i 's|'$old'|'$new'|g' {} \;
    find ./ -type f -not -path "*/.git/*" -exec sed -i 's|'${old_class}'|'${new_class}'|g' {} \;

    sed -i 's|'$old'|'$new'|g' .git/config
    if [[ -d .git ]]; then
      echo ""
      git status
    fi
    ;;

  "bundle")
    bundle exec gem update --system
    bundle exec gem update
    # This is needed because `bundle update`
    # ignores Gemfile.lock, unlike `bundle install`.
    bundle install
    bundle update
    ;;

  *)
    file="$( echo node_modules/*/bin/$action )"
    if [[ -f "$file"  ]]; then
      $file "$@"
      exit 0
    fi

    echo "Unknown action: $action" 1>&2
    exit 1
    ;;
esac


